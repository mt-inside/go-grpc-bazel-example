# ? Code to get repos of bazel macros and commands, over http and git
# ? Loaded from a built-in repository
load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")
load("@bazel_tools//tools/build_defs/repo:git.bzl", "git_repository")

# == Golang ==

# Load the rules' repo
http_archive(
    name = "io_bazel_rules_go",
    urls = [
        "https://mirror.bazel.build/github.com/bazelbuild/rules_go/releases/download/v0.21.2/rules_go-v0.21.2.tar.gz",
        "https://github.com/bazelbuild/rules_go/releases/download/v0.21.2/rules_go-v0.21.2.tar.gz",
    ],
    sha256 = "f99a9d76e972e0c8f935b2fe6d0d9d778f67c760c6d2400e23fc2e469016e2bd",
)

# From that repo, load these macros
load("@io_bazel_rules_go//go:deps.bzl", "go_rules_dependencies", "go_register_toolchains")

go_rules_dependencies()  # Dependencies for the toolchain and the rules' code itself

go_register_toolchains(nogo = "@//:my_nogo")  # Install a Golang toolchain into the sandbox

# == Gazelle ==

# Repo
http_archive(
    name = "bazel_gazelle",
    urls = [
        "https://storage.googleapis.com/bazel-mirror/github.com/bazelbuild/bazel-gazelle/releases/download/v0.20.0/bazel-gazelle-v0.20.0.tar.gz",
        "https://github.com/bazelbuild/bazel-gazelle/releases/download/v0.20.0/bazel-gazelle-v0.20.0.tar.gz",
    ],
    sha256 = "d8c45ee70ec39a57e7a05e5027c32b1576cc7f16d9dd37135b0eddde45cf1b10",
)

# From that repo, load these macros
load("@bazel_gazelle//:deps.bzl", "gazelle_dependencies", "go_repository")  # we need go_repository later, and it's in here because it uses gazelle to generate bazel build files for the code in the repos. Ie go_repository is git_repository plus gazelle adding BUILD files for repos that don't come with them.

gazelle_dependencies()  # Deps for the gazelle rules

# Load the bazel file auto-generated by `gazelle update-repos`
load("//:go_repos.bzl", "go_repositories")

# gazelle:repository_macro go_repos.bzl%go_repositories
go_repositories()  # Run the macro in that file to define all of the golang dependencies

# == Proto ==

# Repo
# - this used to be imported by go_rules_dependencies, but isn't any more for reasons
git_repository(
    name = "com_google_protobuf",
    commit = "09745575a923640154bcf307fba8aedff47f240a",
    remote = "https://github.com/protocolbuffers/protobuf",
    shallow_since = "1558721209 -0700",
)

# From that repo, load these macros
load("@com_google_protobuf//:protobuf_deps.bzl", "protobuf_deps")

protobuf_deps()  # Deps for the protobuf compilation rules
# - NB: this ^^ is just the deps. There isn't an "execution" step because we don't install a toolchain or anything (I think gRPC does that?), there's just rules (and their deps) available to load and run from BUILD files.

# == gRPC ==

# Would be needed if we weren't using gazelle itself (and thus already done this), as the gRPC stuff loads go_repositories, which in turn use gazelle stuff to get built.
# load("@bazel_gazelle//:deps.bzl", "gazelle_dependencies", "go_repository")
# gazelle_dependencies()

# Not strictly needed since we're using Gazelle and we "import google.golang.org/grpc" somewhere, so it would be auto-generated
go_repository(
    name = "org_golang_google_grpc",
    build_file_proto_mode = "disable",  # que?
    importpath = "google.golang.org/grpc",
    sum = "h1:wdKvqQk7IttEw92GoRyKG2IDrUIpgpj6H6m81yfeMW0=",
    version = "v1.25.1",
)

go_repository(
    name = "org_golang_x_net",
    importpath = "golang.org/x/net",
    sum = "h1:oWX7TPOiFAMXLq8o0ikBYfCJVlRHBcsciT5bXOrH628=",
    version = "v0.0.0-20190311183353-d8887717615a",
)

go_repository(
    name = "org_golang_x_text",
    importpath = "golang.org/x/text",
    sum = "h1:g61tztE5qeGQ89tm6NTjjM9VPIm088od1l6aSorWRWg=",
    version = "v0.3.0",
)
